swagger: "2.0"
info:
  description: "This is a office booking systems"
  version: "1.0.0-beta"
  title: "KOBA Working Space"

tags:
  - name: "user"
    description: "operation about user"
  - name: "office"
    description: "everything about office"
  - name: "booking"
    description: "everything about booking"
schemes:
  - "https"
  - "http"
paths:
  /user/all:
    get:
      tags:
        - "user"
      summary: "Show all users on the database"
      description: ""
      operationId: "getUserAll"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Invalid status value"
  /user:
    post:
      tags:
        - "user"
      summary: "Add a new user to the system"
      description: ""
      operationId: "addUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added to the system"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "405":
          description: "Invalid input"
  /user/{id}:
    get:
      tags:
        - "user"
      summary: "Show certain user by id"
      description: ""
      operationId: "getUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid status value"
    put:
      tags:
        - "user"
      summary: "Update an existing user"
      description: ""
      operationId: "updateUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "user object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "user not found"
        "405":
          description: "Validation exception"
    delete:
      tags:
        - "user"
      summary: "Delete certain user by id"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user that needs to be deleted"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "User not found"
  /office/all:
    get:
      tags:
        - "office"
      summary: "Show all offices on the database"
      description: ""
      operationId: "getOfficeAll"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Office"
        "400":
          description: "Invalid status value"
  /office:
    post:
      tags:
        - "office"
      summary: "Add a new office to the system"
      description: ""
      operationId: "addOffice"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Office object that needs to be added to the system"
          required: true
          schema:
            $ref: "#/definitions/Office"
      responses:
        "405":
          description: "Invalid input"
  /office/{id}:
    get:
      tags:
        - "office"
      summary: "Show certain office by id"
      description: ""
      operationId: "getOffice"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Office"
        "400":
          description: "Invalid status value"
    put:
      tags:
        - "office"
      summary: "Update an existing office"
      description: ""
      operationId: "updateOffice"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Office object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Office"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Office not found"
        "405":
          description: "Validation exception"
    delete:
      tags:
        - "office"
      summary: "Delete certain office by id"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOffice"
      produces:
        - "application/json"
      parameters:
        - name: "officeId"
          in: "path"
          description: "ID of office that needs to be deleted"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Office not found"
  /booking/all:
    get:
      tags:
        - "booking"
      summary: "Show all booking on the database"
      description: ""
      operationId: "getBookingAll"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Booking"
        "400":
          description: "Invalid status value"
  /booking:
    post:
      tags:
        - "booking"
      summary: "Add a new booking to the system"
      description: ""
      operationId: "addBooking"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Booking object that needs to be added to the system"
          required: true
          schema:
            $ref: "#/definitions/Booking"
      responses:
        "405":
          description: "Invalid input"
  /booking/{id}:
    get:
      tags:
        - "booking"
      summary: "Show certain booking by id"
      description: ""
      operationId: "getBooking"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Booking"
        "400":
          description: "Invalid status value"
    put:
      tags:
        - "booking"
      summary: "Update an existing booking"
      description: ""
      operationId: "updateBooking"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Booking object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Booking"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "booking not found"
        "405":
          description: "Validation exception"
    delete:
      tags:
        - "booking"
      summary: "Delete certain booking by id"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteBooking"
      produces:
        - "application/json"
      parameters:
        - name: "bookingId"
          in: "path"
          description: "ID of booking that needs to be deleted"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "booking not found"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
      role:
        $ref: "#/definitions/Role"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      photo_url:
        type: "string"
      number:
        type: "string"
      bookings:
        type: "array"
        items:
          $ref: "#/definitions/Booking"
  Office:
    type: "object"
    properties:
      id:
        type: "integer"
      created_by:
        $ref: "#/definitions/User"
      type:
        $ref: "#/definitions/Type"
      name:
        type: "string"
      description:
        type: "string"
      location:
        type: "string"
      view_count:
        type: "integer"
      price:
        type: "integer"
      chair_min:
        type: "integer"
      chair_max:
        type: "integer"
      number:
        type: "string"
      photo_urls:
        type: "array"
        items:
          $ref: "#/definitions/PhotoUrl"
      facilitations:
        type: "array"
        items:
          $ref: "#/definitions/Facilitation"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
  Booking:
    type: "object"
    properties:
      id:
        type: "integer"
      user:
        $ref: "#/definitions/User"
      office:
        $ref: "#/definitions/Office"
      status:
        $ref: "#/definitions/Status"
      start:
        type: "string"
      end:
        type: "string"
      invoice_url:
        type: "string"
  Role:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
  Type:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
  Status:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
  Facilitation:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
  PhotoUrl:
    type: "object"
    properties:
      office_id:
        type: "integer"
      url:
        type: "string"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"